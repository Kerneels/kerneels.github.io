<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Good Fast</title>
    <link>https://blog.goodfast.info/post/</link>
    <description>Recent content in Posts on Good Fast</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 05 Feb 2021 10:26:20 +0000</lastBuildDate><atom:link href="https://blog.goodfast.info/post/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Finding vertical and horizontal, or row and column differences on wide tables, faster</title>
      <link>https://blog.goodfast.info/post/find-differences-fast/</link>
      <pubDate>Fri, 05 Feb 2021 10:26:20 +0000</pubDate>
      
      <guid>https://blog.goodfast.info/post/find-differences-fast/</guid>
      <description>Sometimes we need to show that the exact same data is produced by two different processes. We might be replacing one implementation of an algorithm with a more efficient one, or we might be running the same algorithm on a different technology. We want to show that the data in table_a and table_b is identical, or if it is not identical, we want to identify all differences. In this article, I want to share with you a method that helped me do this.</description>
    </item>
    
    <item>
      <title>Two big ideas of SQL: The What, not How, and querying with ease</title>
      <link>https://blog.goodfast.info/post/what-not-how/</link>
      <pubDate>Wed, 24 Jul 2019 21:45:07 +0200</pubDate>
      
      <guid>https://blog.goodfast.info/post/what-not-how/</guid>
      <description>There are many factors that have contributed to the slow but steady rise of the popularity and ubiquity of SQL as a way to work with data. Among all these factors, the most significant one in my opinion is the concept of &amp;ldquo;what&amp;rdquo; rather than &amp;ldquo;how&amp;rdquo;. The second factor of greatness of SQL for me is the ability to quickly and easily answer questions about data.
I choose to start out with these two big ideas that to me, is fundamental to the language.</description>
    </item>
    
    <item>
      <title>Bar-sized factorial</title>
      <link>https://blog.goodfast.info/post/big-factorial/</link>
      <pubDate>Sun, 23 Jun 2019 22:26:20 +0000</pubDate>
      
      <guid>https://blog.goodfast.info/post/big-factorial/</guid>
      <description>What&amp;rsquo;s the first five digits of 1,000,000! or 1 million factorial? Let&amp;rsquo;s ask Haskell:
Prelude&amp;gt; take 5 $ show $ product [1..1000000] &amp;#34;82639&amp;#34; (1043.56 secs, 1,444,511,743,624 bytes) Neat!
But you might ask, how many digits is this rather large number, of 1 bar factorial? Let&amp;rsquo;s ask again:
Prelude&amp;gt; length $ show $ product [1..1000000] 5565709 (1103.04 secs, 1,444,845,773,000 bytes) Wow! 5.5 million digits! Way more than all the electrons in the universe.</description>
    </item>
    
    <item>
      <title>Permutations and combinations, and ways to calculate the number of draws in a lottery</title>
      <link>https://blog.goodfast.info/post/permutations-combinations/</link>
      <pubDate>Sun, 23 Jun 2019 08:25:20 +0000</pubDate>
      
      <guid>https://blog.goodfast.info/post/permutations-combinations/</guid>
      <description>With a recent, unusually high Power Ball jackpot of ZAR ~220 million, we could not help discussing one&amp;rsquo;s chances for actually hitting the jackpot as a bit of nice office banter.
Despite your personal take on the Power Ball and Lotto,ï¿½ we can turn it into a nice mathematical puzzle, and sanatise the gambling aspect away. Yeah, we can do that, because we are into maths, programming and data! For the uninitiated among us, the way it works is simple really.</description>
    </item>
    
    <item>
      <title>How to use the transitive closure over a set of relations for fast path finding in SQL</title>
      <link>https://blog.goodfast.info/post/transitive-closures/</link>
      <pubDate>Tue, 26 Sep 2017 08:31:17 +0200</pubDate>
      
      <guid>https://blog.goodfast.info/post/transitive-closures/</guid>
      <description>In a previous post, I wrote about how we make sense of the world by modelling relationships between things as tree-like hierarchies. This time we will add to this hierarchical data structure, a representation derived by calculating all possible paths. This set of paths is referred to as a transitive closure, and can be thought of as the set of all paths if you start at each node in the tree.</description>
    </item>
    
    <item>
      <title>Wizen up a bit : solve problems bitwize</title>
      <link>https://blog.goodfast.info/post/wizen-up-a-bit/</link>
      <pubDate>Wed, 20 Sep 2017 08:31:17 +0200</pubDate>
      
      <guid>https://blog.goodfast.info/post/wizen-up-a-bit/</guid>
      <description>I&amp;rsquo;m rather obsessed with bits. All sorts of bits, at various times, but in particular, the digital bit of the Binary system. Notice the capitalization of &amp;ldquo;Binary&amp;rdquo; - it is intended. Efficient bit representations of information is purity ; ever more compact representations elegance itself, so for this post I invite you to come with me, way back to 2013, when a nice couple of bitwise operations flaunted their power and expressiveness.</description>
    </item>
    
    <item>
      <title>10 Ways to outsmart cyber criminals</title>
      <link>https://blog.goodfast.info/post/outsmart-cyber-crims/</link>
      <pubDate>Tue, 27 Jun 2017 14:14:17 +0200</pubDate>
      
      <guid>https://blog.goodfast.info/post/outsmart-cyber-crims/</guid>
      <description>Big day; our first guest contribution! Johann Bergh, a professional translator and recovering software developer put together this list of 10 ways how you can be proactive and outsmart cyber criminals. Enjoy, and take action!
Information is key to the success of cyber criminals. It is the driver that enables them to destroy, steal and extort. Cyber criminals are great detectives. They unite scraps of information from various sources into a nefarious plan.</description>
    </item>
    
    <item>
      <title>Speed up slow views through custom materialization</title>
      <link>https://blog.goodfast.info/post/speed-up-views-through-custom-materialization/</link>
      <pubDate>Thu, 08 Jun 2017 08:31:17 +0200</pubDate>
      
      <guid>https://blog.goodfast.info/post/speed-up-views-through-custom-materialization/</guid>
      <description>SQL views are aluring as a means of abstraction; a &amp;ldquo;building block&amp;rdquo; to hide away commonly used complexity. It is no wonder then that us developers will try them out, and before you know it, your clever recursive CTE view on that hierarchy is used everywhere, by everyone, but how is it affecting overall database performance&amp;hellip;
They look like tables, can be joined on, selected from, and in some cases even updated just like tables, yet the reality is that they are not like tables.</description>
    </item>
    
    <item>
      <title>Knapsack Bitwise</title>
      <link>https://blog.goodfast.info/post/knapsack-bitwise/</link>
      <pubDate>Wed, 12 Oct 2016 22:01:20 +0200</pubDate>
      
      <guid>https://blog.goodfast.info/post/knapsack-bitwise/</guid>
      <description>An interesting bit of computer science, the knapsack problem has been studied for over a century, and according to Wikipedia, seems to be quite popular - as these sort of things go. For the first post in this series I&amp;rsquo;ll present a solution to the 1/0, or binary version of this famous problem I designed in 2015.
I was immediately intrigued by it when I first read the problem statement. It&amp;rsquo;s application to anything requireing optimal resource allocation was very clear, and my mind started obsessively thinking of how to solve this efficiently.</description>
    </item>
    
    <item>
      <title>CTE : simplify those nested sub queries</title>
      <link>https://blog.goodfast.info/post/cte-sub-queries-simplified/</link>
      <pubDate>Sun, 09 Oct 2016 21:26:17 +0200</pubDate>
      
      <guid>https://blog.goodfast.info/post/cte-sub-queries-simplified/</guid>
      <description>This article examines how sub queries can be substituted for the far more readable common table expressions, or CTEs available in many RDBMS systems. I was motivated to write this article when a friend who is fairly new to SQL expressed difficulty in grasping queries containing nested sub queries.
If you&amp;rsquo;ve never heard of CTEs before and you want to get the most out of this article, I recommend you get AdventureWorks2014 sample database and experiment a little with the queries below.</description>
    </item>
    
    <item>
      <title>Efficient git command line &amp; reasonable workflo</title>
      <link>https://blog.goodfast.info/post/reasonable-git-workflow/</link>
      <pubDate>Tue, 19 Jan 2016 21:26:17 +0200</pubDate>
      
      <guid>https://blog.goodfast.info/post/reasonable-git-workflow/</guid>
      <description>Owning a software development shop, or being the prolific master coder that you are, what would you say is your most valuable assit? Is it your carefully acquired intellectual capital in the form of your people / your awesome self? Is it your revolutionary, novel ideas? Perhaps it&amp;rsquo;s both of those, in some sense, but how about something more mundane, like the great code written in the last hour, or day or months?</description>
    </item>
    
    <item>
      <title>now make it fast</title>
      <link>https://blog.goodfast.info/post/now-make-it-fast/</link>
      <pubDate>Fri, 21 Nov 2014 00:00:00 +0000</pubDate>
      
      <guid>https://blog.goodfast.info/post/now-make-it-fast/</guid>
      <description>&amp;quot;He began to copy one of our tables, which contained partial user information, including email IDs, hashed passwords, and last tested URL. His copy operation locked the database table, which raised alerts on our monitoring system. On receiving the alerts, we checked the logs, saw an unrecognized IP, and blocked it right away. In that time, the hacker had been able to retrieve only a portion of the data.&amp;quot;  &amp;ndash; From the postmortem of the Browser Stack hack of 9th November, 2014 at 23:30 GMT</description>
    </item>
    
  </channel>
</rss>
