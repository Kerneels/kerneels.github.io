<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>recursive cte on Good Fast</title>
    <link>https://blog.goodfast.info/tags/recursive-cte/</link>
    <description>Recent content in recursive cte on Good Fast</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 08 Jun 2017 08:31:17 +0200</lastBuildDate><atom:link href="https://blog.goodfast.info/tags/recursive-cte/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Speed up slow views through custom materialization</title>
      <link>https://blog.goodfast.info/post/speed-up-views-through-custom-materialization/</link>
      <pubDate>Thu, 08 Jun 2017 08:31:17 +0200</pubDate>
      
      <guid>https://blog.goodfast.info/post/speed-up-views-through-custom-materialization/</guid>
      <description>SQL views are aluring as a means of abstraction; a &amp;ldquo;building block&amp;rdquo; to hide away commonly used complexity. It is no wonder then that us developers will try them out, and before you know it, your clever recursive CTE view on that hierarchy is used everywhere, by everyone, but how is it affecting overall database performance&amp;hellip;
They look like tables, can be joined on, selected from, and in some cases even updated just like tables, yet the reality is that they are not like tables.</description>
    </item>
    
  </channel>
</rss>
