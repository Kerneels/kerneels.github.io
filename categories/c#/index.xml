<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>c# on Good Fast</title>
    <link>https://blog.goodfast.info/categories/c#/</link>
    <description>Recent content in c# on Good Fast</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 20 Sep 2017 08:31:17 +0200</lastBuildDate><atom:link href="https://blog.goodfast.info/categories/c#/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Wizen up a bit : solve problems bitwize</title>
      <link>https://blog.goodfast.info/post/wizen-up-a-bit/</link>
      <pubDate>Wed, 20 Sep 2017 08:31:17 +0200</pubDate>
      
      <guid>https://blog.goodfast.info/post/wizen-up-a-bit/</guid>
      <description>I&amp;rsquo;m rather obsessed with bits. All sorts of bits, at various times, but in particular, the digital bit of the Binary system. Notice the capitalization of &amp;ldquo;Binary&amp;rdquo; - it is intended. Efficient bit representations of information is purity ; ever more compact representations elegance itself, so for this post I invite you to come with me, way back to 2013, when a nice couple of bitwise operations flaunted their power and expressiveness.</description>
    </item>
    
    <item>
      <title>Knapsack Bitwise</title>
      <link>https://blog.goodfast.info/post/knapsack-bitwise/</link>
      <pubDate>Wed, 12 Oct 2016 22:01:20 +0200</pubDate>
      
      <guid>https://blog.goodfast.info/post/knapsack-bitwise/</guid>
      <description>An interesting bit of computer science, the knapsack problem has been studied for over a century, and according to Wikipedia, seems to be quite popular - as these sort of things go. For the first post in this series I&amp;rsquo;ll present a solution to the 1/0, or binary version of this famous problem I designed in 2015.
I was immediately intrigued by it when I first read the problem statement. It&amp;rsquo;s application to anything requireing optimal resource allocation was very clear, and my mind started obsessively thinking of how to solve this efficiently.</description>
    </item>
    
  </channel>
</rss>
