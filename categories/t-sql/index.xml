<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>t-sql on Good Fast</title>
    <link>https://blog.goodfast.info/categories/t-sql/</link>
    <description>Recent content in t-sql on Good Fast</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 26 Sep 2017 08:31:17 +0200</lastBuildDate><atom:link href="https://blog.goodfast.info/categories/t-sql/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>How to use the transitive closure over a set of relations for fast path finding in SQL</title>
      <link>https://blog.goodfast.info/post/transitive-closures/</link>
      <pubDate>Tue, 26 Sep 2017 08:31:17 +0200</pubDate>
      
      <guid>https://blog.goodfast.info/post/transitive-closures/</guid>
      <description>In a previous post, I wrote about how we make sense of the world by modelling relationships between things as tree-like hierarchies. This time we will add to this hierarchical data structure, a representation derived by calculating all possible paths. This set of paths is referred to as a transitive closure, and can be thought of as the set of all paths if you start at each node in the tree.</description>
    </item>
    
    <item>
      <title>Speed up slow views through custom materialization</title>
      <link>https://blog.goodfast.info/post/speed-up-views-through-custom-materialization/</link>
      <pubDate>Thu, 08 Jun 2017 08:31:17 +0200</pubDate>
      
      <guid>https://blog.goodfast.info/post/speed-up-views-through-custom-materialization/</guid>
      <description>SQL views are aluring as a means of abstraction; a &amp;ldquo;building block&amp;rdquo; to hide away commonly used complexity. It is no wonder then that us developers will try them out, and before you know it, your clever recursive CTE view on that hierarchy is used everywhere, by everyone, but how is it affecting overall database performance&amp;hellip;
They look like tables, can be joined on, selected from, and in some cases even updated just like tables, yet the reality is that they are not like tables.</description>
    </item>
    
    <item>
      <title>CTE : simplify those nested sub queries</title>
      <link>https://blog.goodfast.info/post/cte-sub-queries-simplified/</link>
      <pubDate>Sun, 09 Oct 2016 21:26:17 +0200</pubDate>
      
      <guid>https://blog.goodfast.info/post/cte-sub-queries-simplified/</guid>
      <description>This article examines how sub queries can be substituted for the far more readable common table expressions, or CTEs available in many RDBMS systems. I was motivated to write this article when a friend who is fairly new to SQL expressed difficulty in grasping queries containing nested sub queries.
If you&amp;rsquo;ve never heard of CTEs before and you want to get the most out of this article, I recommend you get AdventureWorks2014 sample database and experiment a little with the queries below.</description>
    </item>
    
    <item>
      <title>now make it fast</title>
      <link>https://blog.goodfast.info/post/now-make-it-fast/</link>
      <pubDate>Fri, 21 Nov 2014 00:00:00 +0000</pubDate>
      
      <guid>https://blog.goodfast.info/post/now-make-it-fast/</guid>
      <description>&amp;quot;He began to copy one of our tables, which contained partial user information, including email IDs, hashed passwords, and last tested URL. His copy operation locked the database table, which raised alerts on our monitoring system. On receiving the alerts, we checked the logs, saw an unrecognized IP, and blocked it right away. In that time, the hacker had been able to retrieve only a portion of the data.&amp;quot;  &amp;ndash; From the postmortem of the Browser Stack hack of 9th November, 2014 at 23:30 GMT</description>
    </item>
    
  </channel>
</rss>
